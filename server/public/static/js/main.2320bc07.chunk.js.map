{"version":3,"sources":["redux/ducks/Invite/index.js","components/Invite.js","components/Going.js","components/NotGoing.js","components/App.js","serviceWorker.js","redux/store.js","index.js"],"names":["initialState","user","goingArr","notGoingArr","state","action","type","payload","getRandom","dispatch","axios","get","then","resp","data","useRandom","useDispatch","useSelector","appState","randomState","person","people","useEffect","add","post","addGoing","noGo","addNotGoing","props","className","to","src","img","alt","name","phone","email","onClick","e","map","key","id","exact","path","component","Invite","Going","NotGoing","Boolean","window","location","hostname","match","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","reducers","enhancer","applyMiddleware","thunk","store","createStore","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2320bc07.chunk.js","sourcesContent":["import { useEffect } from \"react\"\nimport { useSelector, useDispatch } from \"react-redux\"\nimport axios from \"axios\"\n\nconst GET_RANDOM = \"Invite/GET_RANDOM\"\nconst ADD_GOING = \"Invite/ADD_GOING\"\nconst NOT_GOING = \"Invite/NOT_GOING\"\n\nconst initialState = {\n  user: {},\n  goingArr: [],\n  notGoingArr: []\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case GET_RANDOM:\n      return { ...state, user: action.payload }\n    case ADD_GOING:\n      return { ...state, goingArr: action.payload }\n    case NOT_GOING:\n      return { ...state, notGoingArr: action.payload }\n    default:\n      return state\n  }\n}\n\nfunction getRandom() {\n  return dispatch => {\n    axios.get(\"/api\").then(resp => {\n      dispatch({\n        type: GET_RANDOM,\n        payload: resp.data\n      })\n    })\n  }\n}\n\n// for adding users to going array on backend\nfunction addGoing(user) {\n  return dispatch => {\n    axios.post(\"/api/going\", { user }).then(resp => {\n      dispatch(getRandom())\n    })\n  }\n}\n\n// for adding users to notGoing array on backend\nfunction addNotGoing(user) {\n  return dispatch => {\n    axios.post(\"/api/notgoing\", { user }).then(resp => {\n      dispatch(getRandom())\n    })\n  }\n}\n\n// for getting all users in going array\nfunction getGoing() {\n  return dispatch => {\n    axios.get(\"/api/going\").then(resp => {\n      dispatch({\n        type: ADD_GOING,\n        payload: resp.data\n      })\n    })\n  }\n}\n\n// for getting all users in notGoing array\nfunction getNotGoing() {\n  return dispatch => {\n    axios.get(\"/api/notgoing\").then(resp => {\n      dispatch({\n        type: NOT_GOING,\n        payload: resp.data\n      })\n    })\n  }\n}\n\nexport function useRandom() {\n  const dispatch = useDispatch()\n  const user = useSelector(appState => appState.randomState.user)\n  const person = useSelector(appState => appState.randomState.goingArr)\n  const people = useSelector(appState => appState.randomState.notGoingArr)\n  // const random = () => dispatch(getRandom())\n  const add = user => dispatch(addGoing(user))\n  const noGo = user => dispatch(addNotGoing(user))\n  // const allGoing = () => dispatch(getGoing())\n  // const notGoing = () => dispatch(getNotGoing())\n\n  useEffect(() => {\n    dispatch(getRandom())\n    dispatch(getGoing())\n    dispatch(getNotGoing())\n  }, [dispatch])\n  return {\n    user,\n    person,\n    people,\n    add,\n    noGo\n  }\n}\n","import React from \"react\"\nimport { useRandom } from \"../hooks\"\nimport { Link } from \"react-router-dom\"\nimport \"../styles/Invite.css\"\n\nexport default props => {\n  const { user, add, noGo } = useRandom()\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"homeButtonDiv\">\n        <Link to={\"/going\"} className=\"goingButton\">\n          <button>See who is Going</button>\n        </Link>\n        <Link to={\"/notgoing\"} className=\"notGoingButton\">\n          <button>See who is Not Going</button>\n        </Link>\n      </div>\n      <div className=\"person\">\n        <img src={user.img} alt=\"headshot\" />\n        <p>Name: {user.name}</p>\n        <p>Phone: {user.phone}</p>\n        <p>Email: {user.email}</p>\n        <div className=\"yesNo\">\n          <button onClick={e => add(user)}>Yes</button>\n          <button onClick={e => noGo(user)}>No</button>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React from \"react\"\nimport { useRandom } from \"../hooks\"\nimport { Link } from \"react-router-dom\"\nimport \"../styles/Going.css\"\n\nexport default props => {\n  const { person } = useRandom()\n\n  return (\n    <div className=\"goingWrapper\">\n      <div className=\"buttonDiv\">\n        <Link to={\"/going\"} className=\"goingButton\">\n          <button>See who is Going</button>\n        </Link>\n        <Link to={\"/\"}>\n          <button>Home</button>\n        </Link>\n        <Link to={\"/notgoing\"} className=\"notGoingButton\">\n          <button>See who is Not Going</button>\n        </Link>\n      </div>\n      <div className=\"userContainer\">\n        {person.map(user => (\n          <div className=\"person\" key={\"user\" + user.id}>\n            <img src={user.img} alt=\"headshot\" />\n            <p>Name: {user.name}</p>\n            <p>Phone: {user.phone}</p>\n            <p>Email: {user.email}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n","import React from \"react\"\nimport { useRandom } from \"../hooks\"\nimport { Link } from \"react-router-dom\"\nimport \"../styles/NotGoing.css\"\n\nexport default props => {\n  const { people } = useRandom()\n\n  return (\n    <div className=\"notGoingWrapper\">\n      <div className=\"buttonDiv\">\n        <Link to={\"/going\"} className=\"goingButton\">\n          <button>See who is Going</button>\n        </Link>\n        <Link to={\"/\"}>\n          <button>Home</button>\n        </Link>\n        <Link to={\"/notgoing\"} className=\"notGoingButton\">\n          <button>See who is Not Going</button>\n        </Link>\n      </div>\n      <div className=\"userContainer\">\n        {people.map(user => (\n          <div className=\"person\" key={\"user\" + user.id}>\n            <img src={user.img} alt=\"headshot\" />\n            <p>Name: {user.name}</p>\n            <p>Phone: {user.phone}</p>\n            <p>Email: {user.email}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n","import React from \"react\"\nimport { Route } from \"react-router-dom\"\nimport Invite from \"./Invite.js\"\nimport Going from \"./Going.js\"\nimport NotGoing from \"./NotGoing.js\"\n\nexport default props => {\n  return (\n    <div>\n      <Route exact path=\"/\" component={Invite} />\n      <Route exact path=\"/going\" component={Going} />\n      <Route exact path=\"/notgoing\" component={NotGoing} />\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\"\nimport thunk from \"redux-thunk\"\nimport * as reducers from \"./ducks\"\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nconst rootReducer = combineReducers(reducers)\nconst enhancer = composeEnhancers(applyMiddleware(thunk))\n\nconst store = createStore(rootReducer, enhancer)\n\nexport default store\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { BrowserRouter as Router } from \"react-router-dom\"\nimport \"./styles/base.css\"\nimport App from \"./components/App\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport { Provider } from \"react-redux\"\nimport store from \"./redux/store\"\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}